`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    13:37:11 05/27/2015 
// Design Name: 
// Module Name:    mccu 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module mccu(op, func, z, clock, resetn,
	    wpc, wir, wmem, wreg, iord, regrt, m2reg, aluc,
	    shift, alusrca, alusrcb, pcsource, jal, sext state);
   input [5:0] op, func;
   input       z, clock, resetn;

   output reg  wpc, wir, wmem, wreg, iord, regrt, m2reg;
   output reg [3:0] aluc;
   output reg [1:0] alusrcb, pcsource;
   output reg 	    shift, alusrca, jal, sext;
   output reg [2:0] state;

   reg [2:0] 	    next_state;
   parameter [2:0] sif  = 3'b000,
						 sid  = 3'b001,
					    sexe = 3'b010,
						 smem = 3'b011,
						 swb  = 3'b100;

   wire 	  goo
	r_type, i_add, i_sub, i_and, i_or, i_xor, i_sll, i_srl, i_sra, i_jr;
   wire 	    i_addi, i_andi, i_ori, ixori, i_lw, i_sw, i_beq, i_bne, i_lui, i_j, i_jal;
   and(r_type, ~op[5], ~op[4], ~op[3], ~op[2], ~op[1], ~op[0]);
   and(i_add,  r_type,  func[5], ~func[4], ~func[3], ~func[2], ~func[1], ~func[0]);
   and(i_sub,  r_type,  func[5], ~func[4], ~func[3], ~func[2],  func[1], ~func[0]);
   and(i_and,  r_type,  func[5], ~func[4], ~func[3],  func[2], ~func[1], ~func[0]);
   and(i_or,   r_type,  func[5], ~func[4], ~func[3],  func[2], ~func[1],  func[0]);
   and(i_xor,  r_type,  func[5], ~func[4], ~func[3],  func[2],  func[1], ~func[0]);
   and(i_sll,  r_type, ~func[5], ~func[4], ~func[3], ~func[2], ~func[1], ~func[0]);
   and(i_srl,  r_type, ~func[5], ~func[4], ~func[3], ~func[2],  func[1], ~func[0]);
   and(i_sra,  r_type, ~func[5], ~func[4], ~func[3], ~func[2],  func[1],  func[0]);
   and(i_jr,   r_type, ~func[5], ~func[4],  func[3], ~func[2], ~func[1], ~func[0]);
	and(i_addi, ~op[5], ~op[4],  op[3], ~op[2], ~op[1], ~op[0]);
	and(i_andi, ~op[5], ~op[4],  op[3],  op[2], ~op[1], ~op[0]);
	and(i_ori,  ~op[5], ~op[4],  op[3],  op[2], ~op[1],  op[0]);
	and(i_xori, ~op[5], ~op[4],  op[3],  op[2],  op[1], ~op[0]);
	and(i_lw,    op[5], ~op[4], ~op[3], ~op[2],  op[1],  op[0]);
	and(i_sw,    op[5], ~op[4],  op[3], ~op[2],  op[1],  op[0]);
	and(i_beq,  ~op[5], ~op[4], ~op[3],  op[2], ~op[1], ~op[0]);
	and(i_bne,  ~op[5], ~op[4], ~op[3],  op[2], ~op[1],  op[0]);
	and(i_lui,  ~op[5], ~op[4],  op[3],  op[2],  op[1],  op[0]);
	and(i_j,    ~op[5], ~op[4], ~op[3], ~op[2],  op[1], ~op[0]);
	and(i_jal,  ~op[5], ~op[4], ~op[3], ~op[2],  op[1],  op[0]);
	wire i_shift;
	or (i_shift, i_sll, i_srl, i_sra);
	
	always @(*) begin
	end

endmodule
